<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">

    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <link rel="stylesheet" href="/styles/bootstrap-default/3.3.4/bootstrap.css">
    <link rel="stylesheet" href="/styles/beyondadmin/0.0.1/beyond.css">

</head>

<body>
<!-- navbar -->
<div class="navbar">
    <div class="navbar-inner">
        <div class="navbar-container">
            <div class="navbar-header pull-left" style="font-size: 15pt;margin-top:9px;">
                <a  href="/"><strong>新疆高中数学联赛管理系统</strong></a>
            </div>
            <div class="navbar-header pull-right " style="font-size: 15pt;margin-top:9px; margin-right:15px;">
            </div>
        </div>
    </div>
</div>
<br/>
<br/>
<div class="row">
    <div class="col-md-3">
    </div>
    <div class="col-md-6">
        <div class="widget">
            <div class="widget-header bg-blue">
                <i class="widget-icon fa fa-arrow-left"></i>
                <span class="widget-caption">用户注册</span>
                <div class="widget-buttons">
                    <a href="#" data-toggle="config">
                        <i class="fa fa-cog"></i>
                    </a>
                    <a href="#" data-toggle="maximize">
                        <i class="fa fa-expand"></i>
                    </a>
                    <a href="#" data-toggle="collapse">
                        <i class="fa fa-minus"></i>
                    </a>
                    <a href="#" data-toggle="dispose">
                        <i class="fa fa-times"></i>
                    </a>
                </div>
            </div>
            <div class="widget-body">
                <form method="post" action="/register">
                    <div class="form-group">
                        <label for="">用户名</label>
                        <input type="text" class="form-control" name="username" id="username" placeholder="用户名"/>
                    </div>
                    <div class="form-group">
                        <label for="email">邮箱</label>
                        <input type="email" class="form-control" name="email" id="email" placeholder="邮箱地址"/>
                    </div>
                    <div class="form-group">
                        <label for="password">密码</label>
                        <input type="password" class="form-control" name="password" id="password" placeholder="密码"/>
                    </div>
                    <input type='hidden' name='_csrf' value='<%= _csrf %>'>
                    <button class="btn btn-primary" type="submit">注册</button>
                </form>
            </div>
        </div>
    </div>
    <div class="col-md-3">
    </div>
</div>
<!--
   Client-side Templates
   ========================

   HTML templates are important prerequisites of modern, rich client applications.
   To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
   that you load these templates client-side.

   By default, your Gruntfile is configured to automatically load and precompile
   client-side JST templates in your `assets/templates` folder, then
   include them here automatically (between TEMPLATES and TEMPLATES END).

   To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
   For example, here are a few things you could do:

       + Import templates from other directories
       + Use a different template engine (handlebars, jade, dust, etc.)
       + Internationalize your client-side templates using a server-side
         stringfile before they're served.
-->

<!--TEMPLATES-->

<!--TEMPLATES END-->


<!--

  Client-side Javascript
  ========================

  You can always bring in JS files manually with `script` tags, or asynchronously
  on the client using a solution like AMD (RequireJS).  Or, if you like, you can
  take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

  By default, files in your `assets/js` folder are included here
  automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
  CoffeeScript (.coffee) are supported. In production, your scripts will be minified
  and concatenated into a single file.

  To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
  For example, here are a few things you could do:

      + Change the order of your scripts
      + Import scripts from other directories
      + Use a different preprocessor, like TypeScript

-->
